#!/usr/bin/env python
#
#
#
APPLICATION_VERSION = 0.9
APPLICATION_PREFIX = "/opt/chef-registration"

import os
import sys
import optparse
import configobj

if os.path.isdir(os.path.join(APPLICATION_PREFIX, "lib")):
    sys.path.append(os.path.join(APPLICATION_PREFIX, "lib"))

import clientqueue.queue
import message

# Read Command Line Options
parser = optparse.OptionParser(usage="%prog [options] --chef-node=node_name", version="%prog " + str(APPLICATION_VERSION))
parser.add_option("--method", dest="method", default="deregister", help="The client registration method (not implemented)")
parser.add_option("--chef-node", dest="chef_node", default=None, help="[REQUIRED] The chef node name")
parser.add_option("--nagios-node", dest="nagios_node", default=None, help="The name of the nagios client to put in downtime. If this is not specified, it will be set to the value of --chef_node")

parser.add_option("-c", "--config", dest="config", default="/etc/chef-registration/client/client.cfg", help="Configuration file path")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="Log extra debug output")
parser.add_option("-d", "--dry-run", action="store_true", dest="dry_run", default=False, help="Don't actually delete nodes/clients from chef server")
(options, args) = parser.parse_args()

# Create Configuration Defaults
defaults = {
    'aws': {'secret_key': None, 'access_key': None},
    'queue': {'queue_name': None, 'queue_id': None}
}

config = configobj.ConfigObj()
config.merge(defaults)

if os.path.exists(options.config):
    user_config = configobj.ConfigObj(options.config, unrepr=True)
    config.merge(user_config)

    if options.verbose:
        print "Current Config: %s" % (config)
else:
    print "Configuration file '%s' not found." % (options.config)
    sys.exit(1)

if not options.chef_node:
    print "Chef node name required (specify with --chef-node)"
    sys.exit(1)
elif not options.nagios_node:
    # If there is a chef_node name, and no nagios_node name,
    # use the chef_node name for downtiming nagios.
    options.nagios_node = options.chef_node

msg = message.Message({'type': 'registration', 'method': options.method, 'nagios_name': options.nagios_node, 'chef_name': options.chef_node})

if not options.dry_run:
    q = clientqueue.queue.SQSQueue("%s-%s" % (config['queue']['queue_name'], config['queue']['queue_id']), config['aws']['access_key'], config['aws']['secret_key'])
    if options.verbose:
        print "Queueing Message: %s" % (msg)
    q.enqueue(msg)
else:
    print("Message: %s" % (msg))
