#!/usr/bin/env python
#
# This application daemonizes and listens to a queue for specifically crafted events.
# It will then process the event according to type, such as "deregistration", which
# implies certain actions such as Nagios downtime, Chef Client deregistration, etc.
#
APPLICATION_PREFIX = "/opt/chef-registration"

import os
import sys
import time
import daemon
import logging
import optparse
import threading
import configobj

if os.path.isdir(os.path.join(APPLICATION_PREFIX, "lib")):
    sys.path.append(os.path.join(APPLICATION_PREFIX, "lib"))
else:
    APPLICATION_PREFIX = os.getcwd()
    sys.path.append(os.path.join(os.getcwd(), "lib"))

import clientqueue.poller
import clientqueue.queue
import message
import nagcgi
import chef

# Read Command Line Options
parser = optparse.OptionParser(usage="%prog [options]")
parser.add_option("-c", "--config", dest="config", default="/etc/chef-registration/server/server.cfg", help="Configuration file path")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="Log extra debug output")
parser.add_option("-d", "--dry-run", action="store_true", dest="dry_run", default=False, help="Don't actually delete nodes/clients from chef server")
(options, args) = parser.parse_args()

if os.path.exists(options.config):
    config = configobj.ConfigObj()
    user_config = configobj.ConfigObj(options.config, unrepr=True)
    defaults = {
        'general': {'daemon': False, 'pidfile': 'manager.pid', 'backup_dir': 'backups'},
        'aws': {'secret_key': None, 'access_key': None},
        'queue': {'queue_name': None, 'queue_id': None, 'poll_interval': 15},
        'nagios': {'use': True, 'host': 'monitor', 'username': 'cgiservice', 'password': None},
        'chef': {'host': 'localhost', 'key': None, 'client': None}
    }
    config.merge(defaults)
    config.merge(user_config)
else:
    print "Configuration file '%s' not found." % (options.config)
    sys.exit(1)

# Configure Logging
if options.verbose:
    log_level = logging.DEBUG
else:
    log_level = logging.INFO

if config['general']['daemon']:
    logging.basicConfig(level=log_level, filename=os.path.join(APPLICATION_PREFIX, 'manager.log'))
else:
    logging.basicConfig(level=log_level)

logging.getLogger('boto').setLevel(logging.CRITICAL)

# Write out configuration values
logging.info("Running in %s", APPLICATION_PREFIX)
logging.info("Running with the following config settings:\n%s\n%s", config, options)

# Configure Chef API Client
try:
    if None not in [config['chef']['host'], config['chef']['key'], config['chef']['client']]:
        logging.debug("Manual Chef Client: \n%s\n%s\n%s", config['chef']['host'], config['chef']['key'], config['chef']['client'])
        api = chef.ChefAPI(config['chef']['host'], config['chef']['key'], config['chef']['client'])
    else:
        logging.debug("Autoconfiguring Chef Client")
        api = chef.autoconfigure()

    logging.info("Running against the following chef server: %s" % (api.url))
except Exception as e:
    logging.exception("Could not configure Chef Client: \n %s", str(e))
    sys.exit(1)

# Configure ChefRegistrationHandler
if not os.path.exists(os.path.join(APPLICATION_PREFIX, config['general']['backup_dir'])):
    os.mkdir(os.path.join(APPLICATION_PREFIX, config['general']['backup_dir']))


# Configure Nagios CGI Client
if config['nagios']['use']:
    logging.debug("Configuring Nagios Client: ", config['nagios'])
    nagios = nagcgi.Nagcgi(config['nagios']['host'], userid=config['nagios']['username'], password=config['nagios']['password'], debug=options.verbose)

# Configure Deregistration Queue Client
logging.debug("Configuring Queue Client: ", config['queue'])
q = clientqueue.queue.AutoscalingQueue("%s-%s" % (config['queue']['queue_name'], config['queue']['queue_id']), config['aws']['access_key'], config['aws']['secret_key'])

# Configure MessageHandler
logging.debug("Configuring MessageHandler")
handler = message.ChefRegistrationHandler(api, backup_dir=os.path.join(APPLICATION_PREFIX, config['general']['backup_dir']))


def main():
    q_poll_thread = False
    while True:
        logging.debug("Main loop waking up from sleep.")
        logging.debug("Current Active Threads: %s", threading.enumerate())

        if not q_poll_thread or not q_poll_thread.is_alive():
            q_poll_thread = clientqueue.poller.QueuePoller(queue=q, handler=handler, options=options, config=config)
            q_poll_thread.start()

        # Go to sleep if there was nothing in the queue.
        logging.debug("Main loop sleeping for %s secs.", config['queue']['poll_interval'])
        time.sleep(config['queue']['poll_interval'])


if config['general']['daemon']:
    try:
        logger = logging.getLogger()
        with daemon.DaemonContext(working_directory=APPLICATION_PREFIX, files_preserve=[logger.handlers[0].stream]):
            logging.debug("Daemonized.")
            main()
    except Exception as e:
        logging.exception("Exception while daemonizing:\n %s", str(e))
else:
    main()
